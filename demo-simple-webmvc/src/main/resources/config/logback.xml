<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan: 当此属性设置为true时，配置文档如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod: 设置监测配置文档是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <contextName>logback</contextName>

    <springProperty scope="context" name="APPLICATION_NAME" source="spring.application.name"/>
    <springProperty scope="context" name="PROFILE_ACTIVE" source="spring.profiles.active"/>
    <springProperty scope="context" name="LOGBACK_LOG_PATH" source="logback.file-path"/>

    <!-- 0. 日志格式和颜色渲染 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN"
              value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <property name="FILE_LOG_PATTERN"
              value="${FILE_LOG_PATTERN:-[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] [%logger] [%level] %msg %n}"/>

    <!--1. 输出到控制台-->
    <appender name="CONSOLE_LOG_APPENDER" class="ch.qos.logback.core.ConsoleAppender">

        <!-- 文件输出的日志的格式 -->
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>

        <!-- 此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>

    </appender>

    <!-- 2. 输出到文档-->
    <!-- 2.1 level为 DEBUG 日志，时间滚动输出  -->
    <appender name="DEBUG_FILE_LOG_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${LOGBACK_LOG_PATH}/debug-${APPLICATION_NAME}.log</file>

        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOGBACK_LOG_PATH}/otherdays/debug-${APPLICATION_NAME}-%d{yyyyMMdd}-%i.log.zip
            </fileNamePattern>
            <!-- 如果按天来回滚，则最大保存的天数，之前的都将被清理掉 -->
            <maxHistory>7</maxHistory>
            <!-- 日志总保存量 -->
            <totalSizeCap>1GB</totalSizeCap>
            <!-- 日志切割规则 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--文件达到最大时会被压缩和切割 -->
                <maxFileSize>50MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <!-- 文件输出的日志的格式 -->
        <encoder charset="UTF-8" class="net.logstash.logback.encoder.LogstashEncoder">
            <customFields>{}</customFields>
        </encoder>

        <!-- 此日志文档只记录DEBUG级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

    </appender>

    <!-- 2.2 level为 INFO 日志，时间滚动输出  -->
    <appender name="INFO_FILE_LOG_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${LOGBACK_LOG_PATH}/info-${APPLICATION_NAME}.log</file>

        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOGBACK_LOG_PATH}/otherdays/info-${APPLICATION_NAME}-%d{yyyyMMdd}-%i.log.zip
            </fileNamePattern>
            <!-- 如果按天来回滚，则最大保存的天数，之前的都将被清理掉 -->
            <maxHistory>7</maxHistory>
            <!-- 日志总保存量 -->
            <totalSizeCap>1GB</totalSizeCap>
            <!-- 日志切割规则 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--文件达到最大时会被压缩和切割 -->
                <maxFileSize>50MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <!-- 文件输出的日志的格式 -->
        <encoder charset="UTF-8" class="net.logstash.logback.encoder.LogstashEncoder">
            <customFields>{}</customFields>
        </encoder>

        <!-- 此日志文档只记录INFO级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

    </appender>

    <!-- 2.3 level为 WARN 日志，时间滚动输出  -->
    <appender name="WARN_FILE_LOG_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${LOGBACK_LOG_PATH}/warn-${APPLICATION_NAME}.log</file>

        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOGBACK_LOG_PATH}/otherdays/warn-${APPLICATION_NAME}-%d{yyyyMMdd}-%i.log.zip
            </fileNamePattern>
            <!-- 如果按天来回滚，则最大保存的天数，之前的都将被清理掉 -->
            <maxHistory>7</maxHistory>
            <!-- 日志总保存量 -->
            <totalSizeCap>1GB</totalSizeCap>
            <!-- 日志切割规则 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--文件达到最大时会被压缩和切割 -->
                <maxFileSize>50MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <!-- 文件输出的日志的格式 -->
        <encoder charset="UTF-8" class="net.logstash.logback.encoder.LogstashEncoder">
            <customFields>{}</customFields>
        </encoder>

        <!-- 此日志文档只记录WARN级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

    </appender>

    <!-- 2.4 level为 ERROR 日志，时间滚动输出  -->
    <appender name="ERROR_FILE_LOG_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${LOGBACK_LOG_PATH}/error-${APPLICATION_NAME}.log</file>

        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOGBACK_LOG_PATH}/otherdays/error-${APPLICATION_NAME}-%d{yyyyMMdd}-%i.log.zip
            </fileNamePattern>
            <!-- 如果按天来回滚，则最大保存的天数，之前的都将被清理掉 -->
            <maxHistory>7</maxHistory>
            <!-- 日志总保存量 -->
            <totalSizeCap>1GB</totalSizeCap>
            <!-- 日志切割规则 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--文件达到最大时会被压缩和切割 -->
                <maxFileSize>50MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <!-- 文件输出的日志的格式 -->
        <encoder charset="UTF-8" class="net.logstash.logback.encoder.LogstashEncoder">
            <customFields>{}</customFields>
        </encoder>

        <!-- 此日志文档只记录ERROR级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

    </appender>

    <!--
        <logger>用来设置某一个包或者具体的某一个类的日志打印级别、
        以及指定<appender>。<logger>仅有一个name属性，
        一个可选的level和一个可选的addtivity属性。
        name:用来指定受此logger约束的某一个包或者具体的某一个类。
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
              还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。
              如果未设置此属性，那么当前logger将会继承上级的级别。
        addtivity:是否向上级logger传递打印信息。默认是true。
        <logger name="org.springframework.web" level="info"/>
        <logger name="org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor" level="INFO"/>
    -->

    <!--
        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：
        第一种把<root level="info">改成<root level="DEBUG">这样就会打印sql，不过这样日志那边会出现很多其他消息
        第二种就是单独给dao下目录配置debug模式，代码如下，这样配置sql语句会打印，其他还是正常info级别：
        【logging.level.org.mybatis=debug logging.level.dao=debug】
     -->

    <!--
        root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
        不能设置为INHERITED或者同义词NULL。默认是DEBUG
        可以包含零个或多个元素，标识这个appender将会添加到这个logger。
    -->

    <!--<springProfile name="dev">
        <logger name="com.itaddr.demo" level="debug"/>
    </springProfile>-->

    <springProfile name="local">
        <root level="INFO">
            <appender-ref ref="CONSOLE_LOG_APPENDER"/>
        </root>
    </springProfile>

    <springProfile name="dev">
        <root level="INFO">
            <appender-ref ref="DEBUG_FILE_LOG_APPENDER"/>
            <appender-ref ref="INFO_FILE_LOG_APPENDER"/>
            <appender-ref ref="WARN_FILE_LOG_APPENDER"/>
            <appender-ref ref="ERROR_FILE_LOG_APPENDER"/>
        </root>
    </springProfile>

</configuration>